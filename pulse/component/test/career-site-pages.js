(() => {

    "use strict";

    const shadowHost = document.querySelector("a11y-pulse-component");
    const shadowContainer = shadowHost.shadowRoot;
    const careerSitePagesLang = document.documentElement.lang.toLowerCase();
    const hasList = shadowContainer.querySelector(".status-container--career-site-pages ul");

    if(hasList) {

        hasList.remove();

    } 

    const ul = document.createElement("ul");
    const statusContainer = shadowContainer.querySelector(".status-container--career-site-pages");
    statusContainer.appendChild(ul);

    const statusList = shadowContainer.querySelector(".status-container--career-site-pages ul");
    const statusMessage = shadowContainer.querySelector(".status-message--career-site-pages");

    statusMessage.classList.remove("status-message--complete"); 
    statusMessage.textContent = "üîé Fetching pages. Please be patient. Go make a sandwich. Actually, make me one too. Mmmm sammiches.";

    const loadSitemap = async (url) => {

        const response = await fetch(url);
        const text = await response.text();
        return (new DOMParser()).parseFromString(text, "text/xml");

    };

    const checkAjdInput = async (loc) => {

        try {

            const response = await fetch(loc);
            const html = await response.text();
            const dom = new DOMParser().parseFromString(html, "text/html");
            return dom.querySelector("#ajd-header") !== null;

        } catch {

            return false;

        }

    };

    const expandUrlSet = async (urlset) => {

        const urls = [];
        const subfolderCounts = {};
        const urlElements = Array.from(urlset.children);

        let ajdJobsIncluded = 0;
        let regularJobsIncluded = 0;

        const allowedSubfolders = (() => {

            const foldersByLang = {
        
                "ar": ["ÿßŸÑŸÅÿ¶ÿ©", "ÿßŸÑŸÖŸàŸÇÿπ", "ÿßŸÑÿ™Ÿàÿ∏ÿ®ŸÅ", "ÿßŸÑŸàÿ∏ŸäŸÅÿ©", "ŸÖŸàŸÇÿπ-ÿßŸÑŸàÿ∏ŸäŸÅÿ©", "ÿßŸÑÿ®ÿ≠ÿ´-ÿπŸÜ-Ÿàÿ∏ÿßÿ¶ŸÅ", "ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ", "ÿßŸÑÿπŸÖŸÑ", "ÿßŸÑÿ•ÿ≠ÿßŸÑÿ©"],
                "bg": ["–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–Ω–∞–µ–º–∞–Ω–µ-–Ω–∞-—Ä–∞–±–æ—Ç–∞", "—Ä–∞–±–æ—Ç–∞", "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ-–Ω–∞-—Ä–∞–±–æ—Ç–∞—Ç–∞", "—Ä–∞–±–æ—Ç–∏-–∑–∞-—Ç—ä—Ä—Å–µ–Ω–µ", "—Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ", "–±–∏–∑–Ω–µ—Å", "–ø—Ä–µ–ø—Ä–∞—â–∞–Ω–µ"],
                "ca": ["categoria", "ubicaci√≥", "ocupaci√≥", "treball", "ubicaci√≥-del-treball", "cerqueu-feines", "content", "negocis", "derivaci√≥"],
                "zh-hans": ["Á±ªÂà´", "‰ΩçÁΩÆ", "ÈõáÁî®", "Â∑•‰Ωú", "Â∑•‰ΩúÂú∞ÁÇπ", "Ê±ÇËÅå", "ÂÜÖÂÆπ", "ÂÖ¨Âè∏", "Êé®Ëçê"],
                "zh-hant": ["È°ûÂà•", "‰ΩçÁΩÆ", "ÂÉ±Áî®", "Â∑•‰Ωú", "Â∑•‰ΩúÂú∞Èªû", "ÊêúÁ¥¢Â∑•‰Ωú", "ÂÖßÂÆπ", "ÂÖ¨Âè∏", "Êé®Ëñ¶"],
                "hr": ["kategorija", "lokacija", "zapo≈°ljavanje", "posao", "posao-lokacija", "pretraga-poslova", "sadr≈æaj", "poslovanje", "upuƒáivanje"],
                "cs": ["kategorie", "m√≠sto", "zamƒõstnanost", "pr√°ce", "m√≠sto-pr√°ce", "vyhled√°vat-nab√≠dky", "obsah", "faseta", "doporuƒçen√≠"],
                "da": ["kategori", "placering", "ansaettelse", "job", "jobplacering", "soeg-jobs", "indhold", "virksomhed", "henvisning"],
                "nl": ["categorie", "plaats", "werk", "banen", "banen-locatie", "jobs-zoeken", "inhoud", "firma", "doorverwijzing"],
                "en": ["category", "location", "employment", "job", "job_location", "search-jobs", "content", "business", "referral"],
                "en-gb": ["category", "location", "employment", "job", "job_location", "search-jobs", "content", "business", "referral"],
                "et": ["kategooria", "asukoht", "teenistus", "t√∂√∂pakkumine", "t√∂√∂-asukoht", "otsi-t√∂√∂pakkumisi", "sisu", "ettev√µte", "saatekiri"],
                "fi": ["kategoria", "sijainti", "tyollistaminen", "tyopaikka", "tyopaikan-sijainti", "hae-tyopaikkoja", "sisalto", "liiketoiminta", "l√§hetys"],
                "fr": ["cat√©gorie", "lieu", "emplois", "emploi", "lieu-de-travail", "recherche-d'offres", "contenu", "entreprise", "r√©f√©rence"],
                "fr-ca": ["cat√©gorie", "lieu", "emplois", "emploi", "lieu-de-travail", "recherche-d'offres", "contenu", "entreprise", "r√©f√©rence"],
                "de": ["berufsfeld", "l√§nderauswahl", "besch√§ftigung", "stellenbeschreibung", "arbeitsort", "jobsuche", "inhalt", "firma", "verweisung"],
                "el": ["Œ∫Œ±œÑŒ∑Œ≥ŒøœÅŒØŒ±", "œÑŒøœÄŒøŒ∏ŒµœÉŒØŒ±", "ŒµœÅŒ≥Œ±œÉŒØŒ±", "Œ¥ŒøœÖŒªŒµŒπŒ¨", "œÑŒøœÄŒøŒ∏ŒµœÉŒØŒ±-ŒµœÅŒ≥Œ±œÉŒØŒ±œÇ", "ŒµœÅŒ≥Œ±œÉŒØŒµœÇ-Œ±ŒΩŒ±Œ∂ŒÆœÑŒ∑œÉŒ∑œÇ", "œÄŒµœÅŒπŒµœáœåŒºŒµŒΩŒø", "ŒµœÄŒπœáŒµŒØœÅŒ∑œÉŒ∑", "œÄŒ±œÅŒ±œÄŒøŒºœÄŒÆ"],
                "he": ["◊ß◊ò◊í◊ï◊®◊ô◊î", "◊û◊ß◊ï◊ù", "◊™◊¢◊°◊ï◊ß◊î", "◊¢◊ë◊ï◊ì◊î", "◊¢◊ë◊ï◊ì◊î-◊û◊ô◊ß◊ï◊ù", "◊ó◊ô◊§◊ï◊©-◊û◊©◊®◊ï◊™", "◊™◊ï÷π◊õ÷∂◊ü", "◊¢÷µ◊°÷∂◊ß", "◊î◊§◊†◊ô◊î"],
                "hu": ["kateg√≥ria", "hely", "foglalkoztat√°s", "√°ll√°s", "munkahelye", "√°ll√°skeres√©s", "tartalom", "v√°llalkoz√°s", "beterjeszt√©s"],
                "is": ["flokkur", "sta√∞ur", "r√°√∞ning", "starf", "starf-sta√∞setning", "leit-st√∂rf", "efnisinnihald", "vi√∞skipti", "tilv√≠sun"],
                "id": ["kategori", "lokasi", "hubungan-kerja", "pekerjaan", "lokasi-pekerjaan", "cari-pekerjaan", "konten", "bisnis", "rujukan"],
                "it": ["categoria", "luogo", "occupazione", "lavoro", "luogo-di-lavoro", "lavori-di-ricerca", "contenuto", "azienda", "rinvio"],
                "ja": ["„Ç´„ÉÜ„Ç¥„É™„Éº", "„É≠„Ç±„Éº„Ç∑„Éß„É≥", "ÈõáÁî®", "„Ç∏„Éß„Éñ", "‰ªï‰∫ã„ÅÆÂ†¥ÊâÄ", "Ê§úÁ¥¢„Ç∏„Éß„Éñ", "„Ç≥„É≥„ÉÜ„É≥„ÉÑ", "‰ºöÁ§æ", "ÁÖß‰ºö"],
                "ko": ["Î≤îÏ£º", "ÏúÑÏπò", "Í≥†Ïö©", "ÏßÅÎ¨¥", "ÏßÅÎ¨¥-ÏúÑÏπò", "Í≤ÄÏÉâ-ÏßÅÎ¨¥", "ÎÇ¥Ïö©", "ÏÇ¨ÏóÖ", "Ï∂îÏ≤ú"],
                "lv": ["kategorija", "atra≈°anƒÅs-vieta", "nodarbinƒÅtƒ´ba", "vakance", "vakances-atra≈°anƒÅs-vieta", "meklƒìt-darbu", "saturs", "uz≈Üƒìmums", "nodo≈°ana"],
                "lt": ["kategorija", "vieta", "ƒØdarbinimas", "darbas", "darbo-vieta", "ie≈°koti-darb≈≥", "turinys", "veikla", "siuntimas"],
                "ms": ["kategori", "lokasi", "pekerjaan", "kerja", "lokasi-pekerjaan", "cari-pekerjaan", "kandungan", "perniagaan", "rujukan"],
                "no": ["kategori", "sted", "ansettelse", "jobb", "jobb-sted", "s√∏k-jobber", "innhold", "virksomhet", "henvisning"],
                "pl": ["kategoria", "lokalizacja", "zatrudnienie", "praca", "miejsce-pracy", "szukanie-pracy", "zawarto≈õƒá", "faseta", "skierowanie"],
                "pt-pt": ["√°rea", "localiza√ß√£o", "emprego", "vaga", "sub-localiza√ß√£o", "busca-de-vagas", "conte√∫do", "firma", "refer√™ncia"],
                "pt-br": ["√°rea", "localiza√ß√£o", "emprego", "vaga", "sub-localiza√ß√£o", "busca-de-vagas", "conte√∫do", "firma", "refer√™ncia"],
                "ro": ["categorie", "loc", "angajare", "post-vacant", "loc-post-vacant", "cƒÉutare-posturi-vacante", "con»õinut", "afaceri", "recomandare"],
                "ru": ["k–∞—Ç–µ–≥–æ—Ä–∏—è", "–º–µ—Å—Ç–æ", "–∑–∞–Ω—è—Ç–æ—Å—Ç—å", "p–∞–±–æ—Ç–∞", "–º–µ—Å—Ç–æ-—Ä–∞–±–æ—Ç—ã", "–ø–æ–∏—Å–∫-–≤–∞–∫–∞–Ω—Å–∏–π", "c–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–±–∏–∑–Ω–µ—Å", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"],
                "sr": ["kategorija", "lokacija", "zaposlenje", "posao", "lokacija-posla", "pretra≈æi-poslove", "sadr≈æaj", "poslovanje", "—É–ø—É—õ–∏–≤–∞—ö–µ"],
                "sk": ["kateg√≥ria", "umiestnenie", "zamestnanos≈•", "pracovn√©-miesto", "umiestnenie-pracovn√©ho-miesta", "vyhƒæad√°va≈•-pracovn√©-miesta", "obsah", "podnik", "odpor√∫ƒçanie"],
                "sl": ["kategorija", "lokacija", "zaposlitev", "delovno-mesto", "delovno-mesto-lokacija", "iskanje-delovna-mesta", "vsebina", "podjetje", "napotitev"],
                "es": ["categor√≠a", "ubicaci√≥n", "empleo", "trabajo", "ciudad-o-regi√≥n", "buscar-trabajo", "contenido", "empresa", "remisi√≥n"],
                "sv": ["kategori", "plats", "syssels√§ttning", "jobb", "arbetsplats", "jobbs√∂kande", "inneh√•ll", "firma", "remiss"],
                "th": ["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "‡∏Å‡∏≤‡∏£‡∏à‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô", "‡∏á‡∏≤‡∏ô", "‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô", "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤", "‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"],
                "tr": ["kategori", "konum", "i≈üe-alƒ±m", "i≈ü", "i≈ü-bulma", "i≈ü-arama", "i√ßerik", "i≈ületme", "referans"],
                "uk": ["–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è", "–∑–∞–π–Ω—è—Ç—ñ—Å—Ç—å", "–≤–∞–∫–∞–Ω—Å—ñ—è", "–º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è-–≤–∞–∫–∞–Ω—Å—ñ—ó", "–ø–æ—à—É–∫-–≤–∞–∫–∞–Ω—Å—ñ–π", "–∫–æ–Ω—Ç–µ–Ω—Ç", "–±—ñ–∑–Ω–µ—Å", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"],
                "vi": ["danh-m·ª•c", "ƒë·ªãa-ƒëi·ªÉm", "tuy·ªÉn-d·ª•ng", "c√¥ng-vi·ªác", "c√¥ng-vi·ªác-ƒë·ªãa-ƒëi·ªÉm", "tiÃÄm-ki√™ÃÅm-c√¥ng-vi·ªác", "n·ªôi-dung", "kinh-doanh", "gi·ªõi-thi·ªáu"],
                "default": ["category", "location", "employment", "job", "job_location", "search-jobs", "content", "business", "referral"]  
                
                // TODO: default is also en, remove one of them.
            
            };

            const rawFolders = foldersByLang[careerSitePagesLang] || foldersByLang["default"];

            // Always add leading slash and encode once
    
            return rawFolders.map(f => encodeURI(`/${f}/`).toLowerCase());

        })();

        const isJobPage = (loc) => {
    
            const jobPathByLang = {
        
                "ar": "ÿßŸÑŸàÿ∏ŸäŸÅÿ©",
                "bg": "—Ä–∞–±–æ—Ç–∞",
                "ca": "treball",
                "zh-hans": "Â∑•‰Ωú",
                "zh-hant": "Â∑•‰Ωú",
                "hr": "posao",
                "cs": "pr√°ce",
                "da": "job",
                "nl": "banen",
                "en": "job",
                "en-gb": "job",
                "et": "t√∂√∂pakkumine",
                "fi": "tyopaikka",
                "fr": "emploi",
                "fr-ca": "emploi",
                "de": "stellenbeschreibung",
                "el": "Œ¥ŒøœÖŒªŒµŒπŒ¨",
                "he": "◊¢◊ë◊ï◊ì◊î",
                "hu": "√°ll√°s",
                "is": "starf",
                "id": "pekerjaan",
                "it": "lavoro",
                "ja": "„Ç∏„Éß„Éñ",
                "ko": "ÏßÅÎ¨¥",
                "lv": "vakance",
                "lt": "darbas",
                "ms": "kerja",
                "no": "jobb",
                "pl": "praca",
                "pt-pt": "vaga",
                "pt-br": "vaga",
                "ro": "post-vacant",
                "ru": "p–∞–±–æ—Ç–∞",
                "sr": "posao",
                "sk": "pracovn√©-miesto",
                "sl": "delovno-mesto",
                "es": "trabajo",
                "sv": "jobb",
                "th": "‡∏á‡∏≤‡∏ô",
                "tr": "i≈ü",
                "uk": "–≤–∞–∫–∞–Ω—Å—ñ—è",
                "vi": "c√¥ng-vi·ªác",
                "default": "job"

                // TODO: Default is also en. Remove one of them.
    
            };

            const rawJobPath = jobPathByLang[careerSitePagesLang] || jobPathByLang["default"];
            const encodedJobPath = encodeURI(`/${rawJobPath}/`);

            return loc.includes(encodedJobPath);

        };

        const currentPath = window.location.pathname;
        const subfolderPrefix = currentPath.split('/').filter(Boolean)[0];
        const expectedPrefix = `${window.location.origin}/${subfolderPrefix}/`;

        if (urlElements.length && urlElements[0].querySelector("loc") && urlElements[0].querySelector("loc").textContent === window.location.origin && subfolderPrefix) {

            urlElements[0].querySelector("loc").textContent = expectedPrefix;

        }

        for (const url of urlElements) {
    
            const loc = url.querySelector("loc").textContent;
            const path = new URL(loc).pathname.toLowerCase();

            console.log(`üîç Checking URL: ${loc}`);  
            console.log(`üìÅ Normalized path: ${path}`);

            let found = false;

            for (const subfolder of allowedSubfolders) {
    
                console.log(`   ‚Ü™ Checking if path includes: ${subfolder}`);

                if (path.includes(subfolder)) {
        
                    console.log(`‚úÖ Match found: ${subfolder}`);

                    found = true;
        
                    const matchedSubfolder = subfolder;

                    if (isJobPage(loc)) {
            
                        if (ajdJobsIncluded >= 2 && regularJobsIncluded >= 2) {
                
                            console.log("üö´ Job page limits reached. Skipping.");
                
                            break;
            
                        }

                        const hasAjd = await checkAjdInput(loc);
            
                        console.log(`   üîé AJD check for ${loc}: ${hasAjd}`);

                        if (hasAjd && ajdJobsIncluded < 2) {
                
                            ajdJobsIncluded++;
                            
                            console.log(`   ‚úÖ Adding AJD job (${ajdJobsIncluded}/2): ${loc}`);
                
                            urls.push({ loc, ajd: true });
            
                        } else if (!hasAjd && regularJobsIncluded < 2) {
                
                            regularJobsIncluded++;
                
                            console.log(`   ‚úÖ Adding regular job (${regularJobsIncluded}/2): ${loc}`);
                
                            urls.push({ loc });
            
                        }
        
                    } else {
            
                        subfolderCounts[matchedSubfolder] = (subfolderCounts[matchedSubfolder] || 0) + 1;

                        console.log(`üìä Subfolder count for ${matchedSubfolder}: ${subfolderCounts[matchedSubfolder]}`);

                        if (subfolderCounts[matchedSubfolder] <= 2) {
                
                            console.log(`   ‚úÖ Adding category/content page: ${loc}`);
                            
                            urls.push({ loc });
            
                        } else {
                
                            console.log(`   üö´ Skipping (limit reached): ${loc}`);
                        
                        }
        
                    }

                    break;
    
                }

            }

            if (!found) {
    
                console.log("üö´ No subfolder match ‚Äî including anyway.");
    
                urls.push({ loc });

            }

            const allSubfoldersDone = allowedSubfolders.every(
    
                (sub) => (subfolderCounts[sub] || 0) >= 2

            );

            if (
    
                ajdJobsIncluded >= 2 &&
                regularJobsIncluded >= 2 &&
                allSubfoldersDone

            ) {
    
                console.log("üéØ All limits met ‚Äî exiting early.");
                
                break;
            
            }

        }

        return urls;

    };

    const processSitemap = (sitemap) => {

        sitemap = sitemap.documentElement;

        return sitemap.tagName === "urlset" ? expandUrlSet(sitemap) : Promise.resolve([]);

    };

    const getPageInsights = async (urlObj) => {

        const url = urlObj.loc;
        const isAjd = urlObj.ajd;

        try {

            const response = await fetch(url);
            const html = await response.text();
            const dom = new DOMParser().parseFromString(html, "text/html");

            const titleElement = dom.querySelector("title");
            const paddedID = String(urlObj.id).padStart(3, "0");
            
            let title = titleElement && titleElement.textContent.trim() ? titleElement.textContent.trim() : `No Page Title - A11Y${paddedID}`;

            urlObj.missingTitle = !titleElement || titleElement.textContent.trim() === "";

            if (isAjd) title = "(AJD) " + title;

            const isCmsContent = dom.querySelector('meta[name="career-site-page-type"][content="ContentPage-CMS"]');

            if (isCmsContent) title = "(CMS Content) " + title;

            urlObj.title = title;
            urlObj.hasSlick = !!dom.querySelector('[class*="slick"]') || !!dom.querySelector('[class*="slide"]');
            urlObj.hasTabcordion = !!dom.querySelector('[class*="tab-accordion"]') || !!dom.querySelector('[class*="tabcordion"]');

            const li = document.createElement("li");
            const a = document.createElement("a");
            const img = document.createElement("img");

            if (statusList.children.length) {

                statusMessage.textContent = "Almost there. Building inventory...";
        
            }

            a.href = url;
            a.textContent = url;
            a.target = "_blank";
            img.src = "https://radancy.dev/a11y/pulse/component/img/new-tab.png";
            img.alt = "(Opens in new window)";

            a.appendChild(img);
            li.appendChild(a);
        
            statusList.prepend(li);

            return title;

        } catch {

            const li = document.createElement("li");
            const a = document.createElement("a");
            const img = document.createElement("img");

            if (statusList.children.length) {

                statusMessage.textContent = "Almost there. Building inventory...";
        
            }

            a.href = url;
            a.textContent = "Error retrieving: " + url;
            a.target = "_blank";
            img.src = "https://radancy.dev/a11y/pulse/component/img/new-tab.png";
            img.alt = "(Opens in new window)";

            a.appendChild(img);
            li.appendChild(a);
            li.classList.add("status-error");

            statusList.prepend(li);

            urlObj.title = `Title not found - A11Y${urlObj.id}`;
            urlObj.hasSlick = false;
            urlObj.hasTabcordion = false;
            urlObj.missingTitle = true;

            return urlObj.title;
                
        }

    };

    const convertSitemapToArray = async (url) => {
            
        const sitemap = await loadSitemap(url);
        const urls = await processSitemap(sitemap);
        const generateRandomID = () => Math.floor(100000 + Math.random() * 900000);
        const usedIDs = new Set();

        urls.forEach((url) => {
            
            let randomID;

            do {
                    
                randomID = generateRandomID();

            } while (
                    
                usedIDs.has(randomID)
            
            );
            
            usedIDs.add(randomID);
            url.id = randomID;
                
        });

        return urls;
                
    };

    const enrichUrlsWithInsights = async (urls) => {

        for (const url of urls) {

            await getPageInsights(url);

        }

        return urls;

    };

    const makeCsv = (data) => {

        let csv = "Title, URL, ID, Heading Validation, WAVE Validation, Slick, Tabcordion, Heading Issue, Missing Page Title, W3C Validation\n";

        data.forEach((row) => {

            csv += `"${row.title}","${row.loc}","A11Y${row.id}","https://validator.w3.org/nu/?showoutline=yes&doc=${row.loc}#headingoutline","https://wave.webaim.org/report#/${row.loc}","${row.hasSlick ? "X" : ""}","${row.hasTabcordion ? "X" : ""}"," ","${row.missingTitle ? "X" : ""}","https://validator.w3.org/nu/?showsource=yes&showoutline=yes&showimagereport=yes&doc=${row.loc}"\n`;

            // TODO: Remove W3C Validation
        
        });

        return csv;

    };

    const triggerDownload = (csv, file) => {

        const BOM = "\uFEFF"; // UTF-8 BOM - Finally working! 
        const blob = new Blob([BOM + csv], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const link = document.createElement("a");

        link.href = url;
        link.setAttribute("download", file);

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        URL.revokeObjectURL(url);

    };

    const pathSegments = location.pathname.split('/').filter(Boolean);
    const isLangFolder = /^[a-z]{2,3}(-[a-z]{2,4})?$/.test(pathSegments[0]);
    const sitemapUrl = isLangFolder ? `${location.origin}/${pathSegments[0]}/sitemap.xml` : `${location.origin}/sitemap.xml`;

    convertSitemapToArray(sitemapUrl).then((data) => {

        return enrichUrlsWithInsights(data);

    }).then((data) => {

        const csv = makeCsv(data);
        const domain = location.hostname.replace(/\./g, '-');
        const firstSubfolder = location.pathname.split('/').filter(Boolean)[0] || null;
        const file = `${domain}${firstSubfolder ? `-${firstSubfolder}` : ''}-inventory.csv`;

        triggerDownload(csv, file);
    
        statusMessage.classList.add("status-message--complete");
        statusMessage.textContent = `üéâ Complete! Please check your download folder (${file}).`;
    
    });

})();
